from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import AuthenticationForm
from django.db.models import Count
from django.shortcuts import render, redirect

from .forms import UserForm, RegistrationForm
from .models import User


def user_auth(request):
    """
    Register or login
    """

    reg_form = RegistrationForm()
    login_form = AuthenticationForm()

    if request.method == 'POST':
        is_reg = request.POST.get('reg')

        errors = False

        # Registration
        if is_reg:
            # Public registration is currently disabled
            return redirect('login')

            reg_form = RegistrationForm(request.POST)
            if reg_form.is_valid():
                reg_form.save()
                user = authenticate(
                    username=reg_form.cleaned_data['username'],
                    # password1 - password itself, password2 - confirmation
                    password=reg_form.cleaned_data['password1']
                )
                login(request, user)
            else:
                errors = True
        # Login
        else:
            # This form has different design, so we need to
            # specify data argument explicitly
            login_form = AuthenticationForm(data=request.POST)
            if login_form.is_valid():
                login(request, login_form.get_user())
            else:
                errors = True

        # Success
        # Errors' texts are generated by forms
        if not errors:
            return redirect('index')

    context = {
        'reg_form': reg_form,
        'login_form': login_form
    }
    return render(request, 'users/auth.html', context)


@login_required
def user_logout(request):
    logout(request)
    return redirect('login')


@login_required
def profile(request, user_id):
    if user_id == 'me' or request.user.id == int(user_id):
        user_id = request.user.id
        is_me = True
    else:
        is_me = False

    # Get user's stats
    user = User.objects.\
        annotate(folders_count=Count(
            'folders',
            distinct=True
        )).\
        annotate(notepads_count=Count(
            'folders__notepads',
            distinct=True
        )).\
        annotate(notes_count=Count(
            'folders__notepads__notes',
            distinct=True
        )).\
        get(id=user_id)

    context = {
        'is_me': is_me,
        'usercard': user
    }
    return render(request, 'users/profile.html', context)


@login_required
def profile_edit(request):
    # Get user's stats
    user = User.objects.\
        annotate(folders_count=Count(
            'folders',
            distinct=True
        )).\
        annotate(notepads_count=Count(
            'folders__notepads',
            distinct=True
        )).\
        annotate(notes_count=Count(
            'folders__notepads__notes',
            distinct=True
        )).\
        get(id=request.user.id)

    if request.method == 'POST':
        form_user = UserForm(request.POST, request.FILES, instance=user)

        if form_user.is_valid():
            form_user.save()
        else:
            # TODO: return error
            pass

        return redirect('profile', user_id='me')

    form_user = UserForm(instance=user)

    context = {
        'usercard': user,
        'form_user': form_user
    }
    return render(request, 'users/profile_edit.html', context)
