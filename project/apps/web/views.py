# Main
from django.shortcuts import render, redirect
from django.http import HttpResponse

# Validation exceptions
# TODO: use these
from django.core.exceptions import ValidationError, NON_FIELD_ERRORS
from django.db import IntegrityError

# Auth
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required

# Models
from django.contrib.auth.models import User
from apps.data.models import UserProfile, UserGeo, Folder, Notepad, Note

# Forms
from django.contrib.auth.forms import AuthenticationForm
from .forms import UserForm, UserProfileForm, RegistrationForm

# Helpers
from notes.helpers import get_client_ip
from apps.data.helpers import tree_to_list


def user_auth(request):
    """
    Register or login
    """

    reg_form = RegistrationForm()
    login_form = AuthenticationForm()

    if request.method == 'POST':
        is_reg = request.POST.get('reg')

        errors = False

        # Registration
        if is_reg:
            reg_form = RegistrationForm(request.POST)
            if reg_form.is_valid():
                reg_form.save()
                user = authenticate(
                    username=reg_form.cleaned_data['username'],
                    password=reg_form.cleaned_data['password1']  # password2 - confirmation
                )
                login(request, user)
            else:
                errors = True
        # Login
        else:
            # This form has different design, so we need to
            # specify data argument explicitly
            login_form = AuthenticationForm(data=request.POST)
            if login_form.is_valid():
                # Save current user's location
                login(request, login_form.get_user())
                # TODO: remove when all users have it
                try:
                    geo_info = UserGeo.objects.get(user_id=request.user.id)
                except UserGeo.DoesNotExist:
                    geo_info = UserGeo(user=request.user)
                    geo_info.save()
                # Fetch geo info and save it
                ip = get_client_ip(request)
                request.user.geo_info.update_geo(ip)
            else:
                errors = True

        # Success
        # Errors' texts are generated by forms
        if not errors:
            return redirect('index')

    context = {
        'reg_form': reg_form,
        'login_form': login_form
    }
    return render(request, 'web/auth.html', context)


@login_required
def user_logout(request):
    logout(request)
    return redirect('login')


@login_required
def index(request):
    root_folders = request.user.folders \
                               .filter(parent_id=None) \
                               .order_by('title')

    # Folders and notepads
    items = []
    for folder in root_folders:
        items += tree_to_list(folder)

    context = {'items': items}
    return render(request, 'web/index.html', context)


@login_required
def userlist(request):
    users = User.objects.all()
    # TODO: rewrite in one query
    # Attach notepads and notes count for each user
    for user in users:
        user.folders_count = user.folders.count()
        user.notepads_count = User.objects \
                               .filter(id=user.id) \
                               .filter(folders__notepads__isnull=False) \
                               .count()
        user.notes_count = User.objects \
                               .filter(id=user.id) \
                               .filter(folders__notepads__notes__isnull=False) \
                               .count()

    context = {'users': users}
    return render(request, 'web/userlist.html', context)


@login_required
def profile(request, user_id):
    if user_id == 'me' or request.user.id == int(user_id):
        user = request.user
        is_me = True
    else:
        user = User.objects.get(id=user_id)
        is_me = False

    # TODO: rewrite in one query
    # Attach notepads and notes count for the user
    user.folders_count = user.folders.count()
    user.notepads_count = User.objects \
                              .filter(id=user.id) \
                              .filter(folders__notepads__isnull=False) \
                              .count()
    user.notes_count = User.objects \
                           .filter(id=user.id) \
                           .filter(folders__notepads__notes__isnull=False) \
                           .count()

    context = {
        'is_me': is_me,
        'usercard': user
    }
    return render(request, 'web/profile.html', context)


@login_required
def profile_edit(request):
    user = request.user
    # TODO: rewrite in one query
    # Attach notepads and notes count for the user
    user.folders_count = user.folders.count()
    user.notepads_count = User.objects \
                              .filter(id=user.id) \
                              .filter(folders__notepads__isnull=False) \
                              .count()
    user.notes_count = User.objects \
                           .filter(id=user.id) \
                           .filter(folders__notepads__notes__isnull=False) \
                           .count()

    if request.method == 'POST':
        form_user = UserForm(request.POST, instance=user)
        form_profile = UserProfileForm(request.POST,
                                       request.FILES,
                                       instance=user.profile)

        if form_user.is_valid() and form_profile.is_valid():
            form_user.save()
            form_profile.save()
        else:
            # TODO: return error
            pass

        return redirect('profile', user_id='me')

    form_user = UserForm(instance=user)
    form_profile = UserProfileForm(instance=user.profile)

    context = {
        'form_user': form_user,
        'form_profile': form_profile
    }
    return render(request, 'web/profile_edit.html', context)
